{"version":3,"sources":["CountryDropdown.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_countries","orderBy","Object","keys","countries","data","map","code","name","CountryDropdown","React","useState","setCountries","showDropdown","setShowDropdown","selected","setSelected","selectedIndex","setSelectedIndex","node","useRef","onBlur","setTimeout","handleClick","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","className","ref","onClick","el","querySelector","focus","toLowerCase","onChange","value","results","Fuse","threshold","search","d","item","onKeyDown","key","Math","min","length","max","preventDefault","country","placeholder","i","clickItem","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c1febb04.chunk.js","sourcesContent":["import \"./Flags.css\";\nimport \"./CountryDropdown.css\";\nimport Fuse from \"fuse.js\";\nimport React from \"react\";\nimport countries from \"iso-3166-2\";\nimport orderBy from \"lodash/orderBy\";\n\ninterface Country {\n  name: string;\n  code: string;\n}\n\nconst _countries: Array<Country> = orderBy(\n  Object.keys(countries.data).map((code) => {\n    const { name } = countries.data[code];\n    return { code, name };\n  }),\n  \"name\"\n);\n\nfunction CountryDropdown() {\n  const [countries, setCountries] = React.useState<any[]>([]);\n  const [showDropdown, setShowDropdown] = React.useState<boolean>(true);\n  const [selected, setSelected] = React.useState<Country | null>(null);\n  const [selectedIndex, setSelectedIndex] = React.useState<number | null>(null);\n\n  const node = React.useRef<HTMLElement>();\n\n  const onChange = (e: any) => {\n    const name = e.target.value;\n    if (name) {\n      const fuse = new Fuse(_countries, { keys: [\"name\"], threshold: 0.3 });\n      const results = fuse.search(name);\n      setCountries(results.map((d) => d.item));\n    } else {\n      setCountries(_countries);\n    }\n    setSelected(null);\n    setSelectedIndex(null);\n  };\n\n  const clickItem = (country: Country) => {\n    setSelected(country);\n    setShowDropdown(true);\n    setCountries([]);\n  };\n\n  const onBlur = () => {\n    setTimeout(() => {\n      setShowDropdown(true);\n      setCountries([]);\n    }, 100);\n  };\n\n  const clickDropdown = () => {\n    setShowDropdown(false);\n    setCountries(_countries);\n    setTimeout(() => {\n      const el: HTMLInputElement | null = document.querySelector(\".input\");\n      if (el) {\n        el.focus(); // use ref\n      }\n    }, 100);\n  };\n\n  const onKeyDown = (e: any) => {\n    if (e.key === \"ArrowDown\") {\n      setSelectedIndex(\n        selectedIndex === null\n          ? 0\n          : Math.min(countries.length - 1, selectedIndex + 1)\n      );\n    } else if (e.key === \"ArrowUp\") {\n      setSelectedIndex(\n        selectedIndex === null ? null : Math.max(0, selectedIndex - 1)\n      );\n    } else if (e.key === \"Escape\") {\n      onBlur();\n    } else if (e.key === \"Enter\" || e.key === \"Tab\") {\n      e.preventDefault();\n      const country = countries[selectedIndex || 0];\n      if (country) {\n        setSelected(country);\n        onBlur();\n      }\n    }\n  };\n\n  // Handle click outside to close dropdown\n  const handleClick = (e: Event) => {\n    if (node && node.current && node.current.contains(e.target as Node)) {\n      return;\n    }\n    onBlur();\n  };\n  React.useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"CountryDropdown\" ref={node as any}>\n      {showDropdown ? (\n        <div className=\"dropdown\" onClick={clickDropdown}>\n          {selected ? (\n            <div className=\"selected-item\">\n              <div className={`flag flag-${selected.code.toLowerCase()}`}></div>\n              <span className=\"selected-item-text\">{selected.name}</span>\n            </div>\n          ) : (\n            \"Select\"\n          )}\n        </div>\n      ) : (\n        \"\"\n      )}\n      {!showDropdown ? (\n        <input\n          className=\"input\"\n          onChange={onChange}\n          onKeyDown={onKeyDown}\n          placeholder=\"Search\"\n        />\n      ) : (\n        \"\"\n      )}\n      {countries.length ? (\n        <div className=\"autocomplete\">\n          <ul className=\"autocomplete-inner\">\n            {countries.map((country, i) => {\n              return (\n                <li\n                  key={country.code}\n                  className={\n                    \"autocomplete-item \" +\n                    (selectedIndex === i ? \"selected\" : \"\")\n                  }\n                  onClick={() => clickItem(country)}\n                >\n                  <div\n                    className={`flag flag-${country.code.toLowerCase()}`}\n                  ></div>\n                  {country.name}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n\nexport default CountryDropdown;\n","import \"./App.css\";\nimport React from \"react\";\n\nimport CountryDropdown from \"./CountryDropdown\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Country Dropdown</h1>\n      <p>\n        Uses iso-3166-2 and fuse.js to create a simple searchable dropdown for\n        countries which supports fuzzy matching.\n      </p>\n      <p>\n        Navigate options with arrow keys and select with Enter/Tab or mouse.\n        Escape or click outside to close the dropdown.\n      </p>\n      <div className=\"py\">\n        <CountryDropdown />\n      </div>\n      <p>\n        In a real project I'd probably use an existing component{\" \"}\n        <a href=\"https://mui.com/components/autocomplete/\">like this</a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}